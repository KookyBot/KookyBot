plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.0'
    id "org.jetbrains.dokka" version "1.7.0"
    id 'maven-publish'
    id 'signing'
}

group property('group')
version property('version')

repositories {
    mavenCentral()
    maven {
        name 'minecraft-lib'
        url 'https://libraries.minecraft.net'
    }
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'io.javalin:javalin:4.6.3'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.7.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-reflect:1.7.0'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'com.mojang:brigadier:1.0.18'
    implementation 'org.jvoicexml:org.jlibrtp:0.2'
    implementation 'org.apache.directory.server:apacheds-protocol-ntp:2.0.0.AM26'

    // kotlin JavaDoc
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.7.0")
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '17'
}

compileJava {
    sourceCompatibility = (JavaVersion.VERSION_17)
    targetCompatibility = (JavaVersion.VERSION_17)
}

compileTestJava {
    sourceCompatibility = (JavaVersion.VERSION_17)
    targetCompatibility = (JavaVersion.VERSION_17)
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '17'
}

/*java {
    withSourcesJar()
    withJavadocJar()
}*/

dokkaJavadoc {
    outputDirectory = javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives generateJavadoc //javadocJar
    archives sourcesJar
}

signing {
    sign configuration.artifacts
}
/*
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    setArchivesBaseName(project.name)
    manifest {
        attributes 'Main-Class': 'io.github.kookybot.LauncherKt'
    }
    from configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it) }
}
*/